<?
/**
 ** Faction constants
 **/

/*
 * Rights
 */
define ('MEMBER_ALLOWBIZS',       0x0001);
define ('MEMBER_ALLOWVEHICLES',   0x0002);
define ('MEMBER_ALLOWPENCLOSE',   0x0004);
define ('MEMBER_ALLOWCOLLECT',    0x0008);
define ('MEMBER_ALLOWRANK',       0x0010);
define ('MEMBER_ALLOWINVITEKICK', 0x0020);
define ('MEMBER_ALLOWBANK',       0x0040);
define ('MEMBER_ALLOWALL',        0x0080 - 1);

/*
 * Onduty / Offduty
 */
define ('DUTYCHANGE_ALLOW',     0x0001);
define ('DUTYCHANGE_DISALLOW',  0x0002);

/**
 ** class Faction
 ** Works like class Player, but represents a group of people instead of a single.
 **/
abstract class Faction
{
  /**
   ** Attributes
   ** - name:         This faction name
   ** - id:           This faction ID, autogenerated internally
   ** - color:        This faction color
   ** - bank:         Bank money for this faction
   ** - bankfreezed:  Specifies if this faction bank account has been freezed
   ** - maxvehicles:  The limit of vehicles that this faction can have
   ** - maxmembers:   The limit of members for this faction
   ** - membercount:  The current amount of members for this faction
   ** - lowestrank:   The lowest registered rank in this faction
   ** - ranks:        An array associating a rank level with their data (rights, skin, name...)
   ** - stock:        The stock amount of this faction, for whatever they stock (guns, drugs, components, etc)
   ** - hq:           The Room declared as this faction HQ
   **/
  private $name;
  private $id;
  private $color;
  private $bank;
  private $bankfreezed = false;
  private $maxvehicles;
  private $maxmembers;
  private $membercount;
  private $lowestrank = 0;
  private $ranks = array();
  private $members = array();
  private $stock = array(0, 0, 0);
  private $hq = null;


  /**
   ** Default constructor
   **/
  public function __construct($name, $color, $bank, $maxvehicles, $maxmembers, $membercount)
  {
    $this->name = $name;
    $this->color = $color;
    $this->bank = $bank;
    $this->maxvehicles = $maxvehicles;
    $this->maxmembers = $maxmembers;
    $this->membercount = $membercount;
    $this->id = Factions::MakeID($name);
  }


  /**
   ** GetData
   ** Returns an array with the data to be saved in the database
   **/
  public function GetData()
  {
    $data                 = array();
    $data['id']           = $this->id;
    $data['name']         = $this->name;
    $data['bank']         = $this->bank;
    $data['bankfreezed']  = $this->bankfreezed;
    $data['maxvehicles']  = $this->maxvehicles;
    $data['maxmembers']   = $this->maxmembers;
    $data['stock1']       = $this->stock[0];
    $data['stock2']       = $this->stock[1];
    $data['stock3']       = $this->stock[2];

    if ($this->hq)
      $data['HQ']         = $this->hq->DBID();
    else
      $data['HQ']         = null;

    return $data;
  }


  /**
   ** UpdateMembercount
   ** Queries the database to update this faction member count
   **/
  public function UpdateMembercount()
  {
    $this->membercount = DB::GetFactionMemberCount($this->id);
  }


  /**
   ** ID
   ** Returns this faction ID
   **/
  public function ID()
  {
    return $this->id;
  }


  /**
   ** GetName
   ** Returns this faction name
   **/
  public function GetName()
  {
    return $this->name;
  }


  /**
   ** GetColor
   ** Returns this faction color
   **/
  public function GetColor()
  {
    return $this->color;
  }

  /**
   ** SetBank
   ** Sets the faction bank money.
   **
   ** Parameters:
   ** - money: The money to set
   **/
  public function SetBank($money)
  {
    $this->bank = $money;
  }

  /**
   ** GiveBank
   ** Modifies a certain amount the faction bank money.
   **
   ** Parameters:
   ** - amount: The amount to change
   **/
  public function GiveBank($amount)
  {
    $this->bank += $amount;
  }

  /**
   ** GetBank
   ** Retreives the faction bank money
   **/
  public function GetBank()
  {
    return $this->bank;
  }


  /**
   ** RegisterRank
   ** Sets the data for a rank of this faction
   **
   ** Parameters:
   ** - ranklevel:   The rank level to set the data
   ** - rights:      The given rights for this rank
   ** - name:        The rank name
   ** - male_skin:   This rank static male skin, -1 if it hasnt
   ** - female_skin: This rank static female skin, -1 if it hasnt
   **/
  protected function RegisterRank($ranklevel, $name, $rights, $male_skin = -1, $female_skin = -1)
  {
    $this->ranks[$ranklevel] = new Rank($ranklevel, $name, $rights, $male_skin, $female_skin);
    if ($ranklevel > $this->lowestrank)
      $this->lowestrank = $ranklevel;
  }


  /**
   ** LowestRank
   ** Returns the lowest possible rank in this faction
   **/
  public function LowestRank()
  {
    return $this->lowestrank;
  }


  /**
   ** AllowedTo
   ** Checks if the given player is allowed to do some action
   ** in this faction.
   **
   ** Parameters:
   ** - player:   The player to check
   ** - action:   The action to check if the player can do
   **/
  public function AllowedTo(Player $player, $action)
  {
    if (!isset($this->ranks[$player->GetRank()]))
      return false;
    if ($action == ($this->ranks[$player->GetRank()]->rights & $action))
      return true;
    return false;
  }


  /**
   ** GetSkinForPlayer
   ** If the player rank has a static skin, return its id.
   ** otherwise, return -1.
   **
   ** Parameters:
   ** - player: The player to check for static skins
   **/
  public function GetSkinForPlayer(Player $player)
  {
    $rank = $player->GetRank();
    if ($rank === null || !isset($this->ranks[$rank]))
      return -1;

    if ($player->GetSex() == 'M')
      return $this->ranks[$rank]->male_skin;
    else
      return $this->ranks[$rank]->female_skin;
  }

  /**
   ** GetRankName
   ** Get a rank name
   **
   ** Parameters:
   ** - ranklevel: The rank level to check for the name
   **/
  public function GetRankName($ranklevel)
  {
    if (isset($this->ranks[$ranklevel]))
      return $this->ranks[$ranklevel]->name;
    return null;
  }

  /**
   ** GetMaxMembers
   ** Get the max possible amount of members for this faction
   **/
  public function GetMaxMembers()
  {
    return $this->maxmembers;
  }

  /**
   ** GetMemberCount
   ** Get the current amount of members for this faction
   **/
  public function GetMemberCount()
  {
    return $this->membercount;
  }


  /**
   ** SetMemberCount
   ** Updates the member count for this faction
   **
   ** Parameters:
   ** - amount: The new member count
   **/
  public function SetMemberCount($amount)
  {
    $this->membercount = $amount;
  }


  /**
   ** RegisterMember
   ** Adds a member to the current online member list
   **
   ** Parameters:
   ** - player:  The player to add to the list
   **/
  public function RegisterMember(Player $player)
  {
    $this->members[$player->id] = $player;
  }

  /**
   ** UnregisterMember
   ** Removes a member from the current online member list
   **
   ** Parameters:
   ** - player: The player to remove from the list
   **/
  public function UnregisterMember(Player $player)
  {
    unset($this->members[$player->id]);
  }

  /**
   ** Send
   ** Sends a message to all faction online members
   **
   ** Parameters:
   ** - color:          The color of the message
   ** - message:        The message to send
   ** - require_rights: Required rights of the member to get the message
   **/
  public function Send($color, $message, $require_rights = 0)
  {
    foreach ($this->members as $member)
    {
      if ($this->AllowedTo($member, $require_rights))
        $member->Send($color, $message);
    }
  }

  /**
   ** SetStock
   ** Sets this faction stock of whatever they stock
   **
   ** Parameters:
   ** - stock:  The new stock amount
   ** - slot:   The stock slot id
   **/
  public function SetStock($stock, $slot)
  {
    $this->stock[$slot] = $stock;
  }

  /**
   ** GetStock
   ** Returns this faction stock amount
   **
   ** Parameters:
   ** - slot:  The stock slot ID
   **/
  public function GetStock($slot)
  {
    return $this->stock[$slot];
  }


  /**
   ** FreezeBank
   ** Sets this faction bank frozen or not frozen.
   **
   ** Parameters:
   ** - state: The new state of the bank account
   **/
  public function FreezeBank($state = true)
  {
    $this->bankfreezed = $state;
    if ($this->bankfreezed)
    {
      /* Unsell faction sellable properties */
      Houses::UnsellFactionRooms($this);
    }
  }


  /**
   ** BankFreezed
   ** Returns true if this faction bank has been freezed
   **/
  public function BankFreezed()
  {
    return $this->bankfreezed;
  }


  /**
   ** SetHQ
   ** Establishes what house / room is this faction HQ
   **
   ** Parameters:
   ** - room: The room that is declared as this faction HQ
   **/
  public function SetHQ(Room $hq = null)
  {
    $this->hq = $hq;
  }

  /**
   ** GetHQ
   ** Returns this faction HQ
   **/
  public function GetHQ()
  {
    return $this->hq;
  }



  /***
   *** Abstract functions
   ***/
  abstract public function PlayerChangesDuty(Player $player, $state);
  abstract public function GetPlayerColor(Player $player);
  abstract public function GetNameForPlayer(Player $player);
}


/**
 ** class Rank
 ** Defines a rank information
 **/
class Rank
{
  public $level;
  public $name;
  public $rights;
  public $male_skin;
  public $female_skin;

  public function __construct($level, $name, $rights, $male_skin, $female_skin)
  {
    $this->level       = $level;
    $this->name        = $name;
    $this->rights      = $rights;
    $this->male_skin   = $male_skin;
    $this->female_skin = $female_skin;
  }
}
?>
